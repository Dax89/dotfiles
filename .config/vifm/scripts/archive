#!/bin/sh

# Supported Extensions:
# .jar, zip, rar, 7z, tar, tar.xz, tar.gz, tar.bz2

usage() {
    echo "Usage:
  archive [options] [mode] [arg] [workdir]

  Arguments:
    mode         (l=list, x=extract, c=create)

  Options:
    -p PASSWORD  Archive password (optional)
    -o FILENAME  Output filename (optional)"
}

invalid_workdir() {
    if [ -z "$workdir" ]; then
        echo "ERROR: working dir is empty"
    fi

    usage
    exit 1
}

unsupported_password() {
    echo "ERROR: '$1' archive type doesn't support encryption"
    usage
    exit 1
}

unsupported_archive_type() {
    echo "ERROR: unsupported archive type '$1'"
    usage
    exit 1
}

missing_filename() {
    echo "ERROR: filename missing"
    usage
    exit 1
}

get_mimetype() {
    file -b --mime-type "$1"
}

check_extracted_folder() {
    tmpdir="$1"
    name="$2"
    files=$(printf "%s\n" "$tmpdir/"*)

    if [ "$(echo "$files" | wc -l)" -eq 1 ]; then
        if [ -d "$PWD/$files" ]; then
            mv -f "$files/*" "$PWD"
        else
            mv -f "$files" "$PWD"
        fi

        [ -d "$tmpdir" ] && rm -r "$tmpdir"
    else
        mv "$tmpdir" "$name"
    fi

    case "$name" in
        *.tar) [ -d "$name" ] && mv -f "$name" "${name%*.tar}" ;;
        *) ;;
    esac
}

list_archive() {
    if [ -z "$arg" ]; then
        missing_filename
    fi

    mime=$(get_mimetype "$arg")

    case "$mime" in
        application/java-archive | application/zip) unzip -l "$arg" ;;
        application/x-rar) unrar l "$arg" ;;
        application/x-7z-compressed) 7z l "$arg" ;;

        application/x-tar | application/x-xz | application/x-gz | \
        application/x-bz2 | application/gzip | application/x-bzip2)
            tar tf "$arg" | tree --fromfile -C --dirsfirst
            ;;

        *)
            echo "Cannot list $arg files $mime"
            exit 1
            ;;
    esac
}

extract_archive() {
    # https://www.cyberciti.biz/faq/howto-extract-tar-file-to-specific-directory-on-unixlinux
    mime=$(get_mimetype "$arg")
    tmpdir=$(mktemp -d)

    case "$mime" in
        application/java-archive | application/zip) unzip -o -d "$tmpdir" "$arg" ;;
        application/x-rar) unrar x "$arg" "$tmpdir" ;;
        application/x-7z-compressed) 7z x "$arg" "-o$tmpdir" ;;
        application/x-tar | application/x-xz) tar xvf "$arg" "-C$tmpdir" ;;
        application/x-gz | application/gzip) tar zxvf "$arg" "-C$tmpdir" ;;
        application/x-bz2 | application/x-bzip2) tar jxvf "$arg" "-C$tmpdir" ;;

        *)
            echo "ERROR: cannot extract '$arg' ($mime)"
            exit 1
            ;;
    esac

    name="${arg%.*}"
    check_extracted_folder "$tmpdir" "$name"
}

create_archive() {
    if [ -z "$arg" ]; then
        echo "ERROR: missing filename(s)"
        usage
        exit 1
    fi

    # Disable globbing to make the word-splitting below safe.
    set -f 

    # Set the argument list to the word-splitted string.
    # This removes all leading/trailing white-space and reduces
    # all instances of multiple spaces to a single ("  " -> " ").
    # shellcheck disable=2086
    set -- $1

    # Re-enable globbing.
    set +f

    ext="${output##*.}"

    case "$ext" in
        zip)
            if [ -n "$password" ]; then
                echo "$@" | xargs zip -r -P "$password" "$output"
            else
                echo "$@" | xargs zip -r "$output"
            fi
            ;;

        rar)
            if [ -n "$password" ]; then
                echo "$@" | xargs rar -r -hp "$password" a -r "$output"
            else 
                echo "$@" | xargs rar -r a -r "$output"
            fi
            ;;

        7z)
            if [ -n "$password" ]; then 
                echo "$@" | xargs 7z -P"$password" a "$output"
            else
                echo "$@" | xargs 7z a "$output"
            fi
            ;;

        tar)
            [ -n "$password" ] && unsupported_password "$ext"
            echo "$@" | xargs tar cvf "$output"
            ;;

        xz)
            [ -n "$password" ] && unsupported_password "$ext"
            echo "$@" | xargs tar cvJ "$output"
            ;;

        gz)
            [ -n "$password" ] && unsupported_password "$ext"
            echo "$@" | xargs tar cvfz "$output"
            ;;

        bz2)
            [ -n "$password" ] && unsupported_password "$ext"
            echo "$@" | xargs tar cvfj "$output"
            ;;

        *) unsupported_archive_type "$ext" ;;
    esac
}

password=""
output=""

while getopts ":p:o:" opt; do
    case $opt in
        p)  password="$OPTARG" ;;
        o)  output="$OPTARG" ;;
        :)  echo "missing argument"; exit 2 ;;
        \?) echo "invalid option '$opt'"; exit 2 ;;
    esac
done

# Filter out arguments that start with "-" and move them.
shift "$((OPTIND - 1))" 

mode=$1
workdir=$2
arg=$3

[ -z "$workdir" ] && invalid_workdir
cd "$workdir" || invalid_workdir

case "$mode" in
    l) list_archive ;;
    x) extract_archive ;;
    c) create_archive "$arg" ;;
    *) usage; exit 2 ;;
esac
